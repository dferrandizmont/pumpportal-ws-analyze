# ========================================================================================
# PUMPPORTAL WEBSOCKET
# ========================================================================================
PUMP_PORTAL_WS_URL=wss://pumpportal.fun/api/data
PUMP_PORTAL_API_KEY=            # Optional (leave empty if not used)

# ========================================================================================
# LOGGING
# ========================================================================================
LOG_LEVEL=info
LOG_TIMEZONE=Europe/Madrid
SUPPRESS_PUMP_WS_TRADE_PROCESSING_LOG=false

# Trade logging controls
TRADE_LOG_SAMPLE_EVERY=0        # Log only 1 of every N trades (0/1 disables sampling)
TRADE_LOG_THROTTLE_MS=0         # Minimum ms between logs per token (0 disables)

# ========================================================================================
# APPLICATION
# ========================================================================================
CREATOR_SELL_THRESHOLD=80.0     # % of creator-held tokens to trigger detection
MAX_RECONNECT_ATTEMPTS=10
MONITOR_CREATOR_SELLS=true
RECONNECT_DELAY_MS=5000

# ========================================================================================
# TRACKING FILTERS
# ========================================================================================
# Enable filters at creator-sell trigger
TRACK_FILTERS_ENABLED=false
# Track all mints regardless of filters
TRACK_ALL_MINTS=false

# Activity thresholds
TRACK_MIN_BUY_RATIO=0           # 0..1 (e.g., 0.6)
TRACK_MIN_BUYS=0
TRACK_MIN_NET_BUYS=0
TRACK_MIN_TOTAL_TRADES=0
TRACK_MIN_UNIQUE_TRADERS=0

# Market cap thresholds at trigger
TRACK_MIN_MC_USD=0
TRACK_MAX_MC_USD=               # empty = Infinity

# Participation density
TRACK_MIN_BUYS_PER_UNIQUE=0     # e.g., 1.5
TRACK_MIN_UNIQUE_PER_TRADE=0    # e.g., 0.7

# Age & volatility constraints
TRACK_MAX_AGE_AT_TRIGGER_SEC=   # e.g., 3600 (1 hour)
TRACK_MAX_MC_VOLATILITY_RATIO=  # e.g., 5 (maxMC/minMC prior to trigger)

# ========================================================================================
# PRICE SERVICE (COINGECKO)
# ========================================================================================
COINGECKO_SOL_ENDPOINT=https://api.coingecko.com/api/v3/coins/solana
PRICE_REFRESH_MS=600000         # Interval (ms). Example: 600000 = 10 minutes

# ========================================================================================
# HTTP SERVER
# ========================================================================================
HTTP_PORT=3000

# ========================================================================================
# TRACKING
# ========================================================================================
TRACKING_ENABLED=true
TRACKING_ENTRY_DELAY_SEC=2
TRACKING_INACTIVITY_MIN=10
TRACKING_LOG_DIR=tracking
TRACKING_MAX_WINDOW_MIN=20
TRACKING_TP_PCT=20

# ========================================================================================
# SUMMARIES (GLOBAL SUMMARY LOGGING/CLASSIFICATION)
# ========================================================================================
SUMMARIES_BAD_THRESHOLD_PCT=36  # "bad" if minPct <= -this value
SUMMARIES_GOOD_THRESHOLD_PCT=20 # "good" if maxPct >= this value
SUMMARIES_PRICE_DECIMALS=12

# ========================================================================================
# ANALYSIS / BACKTEST (Offline scripts)
# ========================================================================================
# Limit dataset size during backtests (0 = sin límite)
BT_LIMIT=0
# Objetivo para la regla recomendada: f1 | precision | recall | recall_min_precision
BT_OBJECTIVE=f1
# Precisión mínima cuando usas OBJECTIVE=recall_min_precision (ej. 0.25 = 25%)
BT_MIN_PRECISION=0.25
# Cobertura mínima cuando usas OBJECTIVE=precision (fracción del dataset; ej. 0.05 = 5%)
BT_MIN_COVERAGE=0.05
BT_WORKERS=0                 # 0 = auto (CPUs-1), o fija un número
BT_TOPK=25                   # top-K por objetivo en JSON/HTML

# ========================================================================================
# WALLET BACKTEST (Simulación de cartera secuencial)
# ========================================================================================
# Estrategia a usar (id en strategies.json)
BACKTEST_STRATEGY_ID=
# Saldo inicial (SOL)
BACKTEST_INITIAL_SOL=1.5
# Asignación por operación: usa SOL fijo o % de cartera (predeterminado 1.0 = 100%)
BACKTEST_ALLOC_SOL=
BACKTEST_ALLOC_PCT=1.0
# Reglas de salida
BACKTEST_TP_PCT=10            # take-profit en % (ej. 10)
BACKTEST_SL_PCT=5             # stop-loss en % (ej. 5)
BACKTEST_TIMEOUT_SEC=300      # timeout en segundos
# Costes
BACKTEST_FEE_PCT=0            # por lado (se aplica ida+vuelta)
BACKTEST_SLIPPAGE_PCT=0       # por lado (se aplica ida+vuelta)
# Performance parsing
BACKTEST_LIMIT=0              # 0 = sin límite de sesiones
BACKTEST_PARSE_CONCURRENCY=6  # hilos de parseo de logs

# ========================================================================================
# STRATEGIES CONFIG (Opcional)
# ========================================================================================
# Puedes inyectar estrategias vía JSON (array) en esta variable, o
# apuntar a un fichero específico con STRATEGIES_FILE.
# Si ninguna está definida, se usará la configuración por ENV (fallback).
STRATEGIES_JSON=
STRATEGIES_FILE=strategies.json
